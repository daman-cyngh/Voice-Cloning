from encoder.params_model import model_embedding_size as speaker_embedding_size
from utils.argutils import print_args
from synthesizer.inference import Synthesizer
from encoder import inference as encoder
from vocoder import inference as vocoder
from pathlib import Path
import numpy as np
import librosa
import argparse
import torch
import sys
import soundfile as sf
import os

if __name__ == '__main__':
    

    
    print("Running a test of your configuration...\n")
    if not torch.cuda.is_available():
        print("Your PyTorch installation is not configured to use CUDA. If you have a GPU ready "
              "for deep learning, ensure that the drivers are properly installed, and that your "
              "CUDA version matches your PyTorch installation. CPU-only inference is currently "
              "not supported.", file=sys.stderr)
        quit(-1)
    device_id = torch.cuda.current_device()
    gpu_properties = torch.cuda.get_device_properties(device_id)
    print("Found %d GPUs available. Using GPU %d (%s) of compute capability %d.%d with "
          "%.1fGb total memory.\n" % 
          (torch.cuda.device_count(),
           device_id,
           gpu_properties.name,
           gpu_properties.major,
           gpu_properties.minor,
           gpu_properties.total_memory / 1e9))
    
    
    
    print("Preparing the encoder, the synthesizer ")
    encoder_weights = Path("encoder/saved_models/pretrained.pt")
    syn_dir = Path("synthesizer/saved_models/logs-pretrained/taco_pretrained")
    voc_model_fpath = Path("vocoder/saved_models/pretrained/pretrained.pt")

    encoder.load_model(encoder_weights)
    synthesizer = Synthesizer(syn_dir)
    vocoder.load_model(voc_model_fpath)


    i = 0
    
    entries = os.listdir('D:/Voice-Cloning/vctk-inputs/')
    for entry in entries:
        i = i + 1
        embeds = []
        preprocessed_wav = encoder.preprocess_wav('D:/Voice-Cloning/vctk-inputs/'+entry)
        
        embeds.append(encoder.embed_utterance(preprocessed_wav))

        
        file = open("preprocessed_wav", "wb")
        
        np.save(file, preprocessed_wav)
        
        file.close

        print("Embedding generated by the encoder:")
        print(embeds);

        
        file = open("embedding_output", "wb")
        
        np.save(file, embeds)
        
        file.close

        print("Interactive generation loop")

        try:
            
            text = "On offering to help the blind man, the man who then stole his car, had not, at that precise moment, had any evil intention"
            texts = [text]

            
            specs = synthesizer.synthesize_spectrograms(texts, embeds)
            spec = specs[0]
            print("Created the mel spectrogram!! This will act as input to the vocoder:")
            print(type(spec))
            print(spec)

            
            file = open("spectrogram", "wb")
            
            np.save(file, spec)
            
            file.close

            
            print("Synthesizing the waveform:")
            
            generated_wav = vocoder.infer_waveform(spec)
            
            
            generated_wav = np.pad(generated_wav, (0, synthesizer.sample_rate), mode="constant")

            print("generated_wav.dtype: ", generated_wav.dtype)
            root = 'D:/Voice-Cloning/vctk-outputs/'
            ofile = entry
            fpath = root + ofile
            sf.write(fpath, generated_wav.astype(np.float32), synthesizer.sample_rate)

            print("\nSaved output as %s\n\n" % fpath)

        except Exception as e:
            print("Caught exception: %s" % repr(e))
            print("Restarting\n")

    